// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.RecycleRush;

import org.usfirst.frc250.RecycleRush.commands.Auto.*;
import org.usfirst.frc250.RecycleRush.commands.DriveFolder.*;
import org.usfirst.frc250.RecycleRush.commands.Elevator.*;
import org.usfirst.frc250.RecycleRush.commands.Gripper.*;
import org.usfirst.frc250.RecycleRush.commands.PID.*;
import org.usfirst.frc250.RecycleRush.commands.Utilities.LightPush;
import org.usfirst.frc250.RecycleRush.commands.Utilities.ZeroGyro;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton toggleGrippers;
    public JoystickButton upTwo;
    public JoystickButton downTwo;
    public JoystickButton yogiUp;
    public JoystickButton yogiDown;
    public Joystick manipulator;
    public JoystickButton speedChange;
    public JoystickButton robotOrientation;
    public Joystick driver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driver = new Joystick(0);
        
        robotOrientation = new JoystickButton(driver, 1);
        robotOrientation.whenPressed(new EnableRobotOriented());
        speedChange = new JoystickButton(driver, 10);
        speedChange.whenPressed(new ChangeSpeed());
        manipulator = new Joystick(1);
        
        yogiDown = new JoystickButton(manipulator, 1);
        yogiDown.whileHeld(new ElevatorYogiStackDown());
        yogiUp = new JoystickButton(manipulator, 4);
        yogiUp.whileHeld(new ElevatorYogiStackUp());
        downTwo = new JoystickButton(manipulator, 3);
        downTwo.whenPressed(new ElevatorShortDecrement());
        upTwo = new JoystickButton(manipulator, 2);
        upTwo.whenPressed(new ElevatorShortIncrement());
        toggleGrippers = new JoystickButton(manipulator, 6);
        toggleGrippers.whenPressed(new ToggleGripper());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("DoNothingAuto", new DoNothingAuto());

        SmartDashboard.putData("Drive", new Drive());

        SmartDashboard.putData("ElevatorBottom", new ElevatorBottom());

        SmartDashboard.putData("Pup", new Pup());

        SmartDashboard.putData("Pdown", new Pdown());

        SmartDashboard.putData("Iup", new Iup());

        SmartDashboard.putData("Idown", new Idown());

        SmartDashboard.putData("Dup", new Dup());

        SmartDashboard.putData("Ddown", new Ddown());

        SmartDashboard.putData("ElevatorUp", new ElevatorUp());

        SmartDashboard.putData("ElevatorDown", new ElevatorDown());

        SmartDashboard.putData("ElevatorIncrement", new ElevatorIncrement());

        SmartDashboard.putData("ElevatorDecrement", new ElevatorDecrement());

        SmartDashboard.putData("SetOrientation0", new SetOrientation0());

        SmartDashboard.putData("SetOrientation90", new SetOrientation90());

        SmartDashboard.putData("SetOrientation180", new SetOrientation180());

        SmartDashboard.putData("SetOrientation270", new SetOrientation270());

        SmartDashboard.putData("LeftHPStation", new LeftHPStation());

        SmartDashboard.putData("RightHPStation", new RightHPStation());

        SmartDashboard.putData("ZeroGyro", new ZeroGyro());

        SmartDashboard.putData("ZeroWheels", new ZeroWheels());

        SmartDashboard.putData("ChangeSpeed", new ChangeSpeed());

        SmartDashboard.putData("ElevatorDrive", new ElevatorDrive());

        SmartDashboard.putData("ToggleGripper", new ToggleGripper());

        SmartDashboard.putData("ElevatorShortIncrement", new ElevatorShortIncrement());

        SmartDashboard.putData("ElevatorShortDecrement", new ElevatorShortDecrement());

        SmartDashboard.putData("EnableRobotOriented", new EnableRobotOriented());

        SmartDashboard.putData("DisableRobotOriented", new DisableRobotOriented());

        SmartDashboard.putData("LightPush", new LightPush());

        SmartDashboard.putData("ElevatorYogiStackDown", new ElevatorYogiStackDown());

        SmartDashboard.putData("ElevatorYogiStackUp", new ElevatorYogiStackUp());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        robotOrientation.whenReleased(new DisableRobotOriented());

    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getManipulator() {
        return manipulator;
    }

    public Joystick getDriver() {
        return driver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

