// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc250.RecycleRush;
    
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder elevatorElevatorEncoder;
    public static SpeedController elevatorElevatorMotor;
    public static DoubleSolenoid elevatorRatchet;
    public static DigitalInput elevatorLimitUp;
    public static DigitalInput elevatorLimitDown;
    public static DigitalInput elevatorLimitRatchet;
    public static DoubleSolenoid gripperGripper;
    public static AnalogInput gripperTransducer;
    public static Compressor gripperCompressor;
    public static SpeedController drivetrainFRDMotor;
    public static SpeedController drivetrainFRAMotor;
    public static SpeedController drivetrainFLDMotor;
    public static SpeedController drivetrainFLAMotor;
    public static SpeedController drivetrainRRDMotor;
    public static SpeedController drivetrainRRAMotor;
    public static SpeedController drivetrainRLDMotor;
    public static SpeedController drivetrainRLAMotor;
    public static Encoder drivetrainFLEncoder;
    public static Encoder drivetrainFREncoder;
    public static Encoder drivetrainRREncoder;
    public static Encoder drivetrainRLEncoder;
    public static DigitalInput drivetrainResetButton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static DriverStation ds;
    
    // Elevator solenoid constants
    public static final DoubleSolenoid.Value kELEVATOR_DIRECTION_UP = DoubleSolenoid.Value.kForward;
    public static final DoubleSolenoid.Value kELEVATOR_DIRECTION_DOWN = DoubleSolenoid.Value.kReverse;
    public static final DoubleSolenoid.Value kGRIPPER_CLOSE = DoubleSolenoid.Value.kForward;
    public static final DoubleSolenoid.Value kGRIPPER_OPEN = DoubleSolenoid.Value.kReverse;
    
    // Elevator speed constants
    public static final double kELEVATOR_MAX_SPEED_UP = 0.75;
    public static final double kELEVATOR_MAX_SPEED_DOWN = -0.3;
    public static final double kELEVATOR_TOP_SPEED_ZONE_MULTIPLIER = 0.75;
    public static final double kELEVATOR_BOTTOM_SPEED_ZONE_MULTIPLIER = 0.5;
    public static final double kELEVATOR_MANUAL_UP_LOADED_SPEED = 0.75;
    public static final double kELEVATOR_MANUAL_UP_UNLOADED_SPEED = 0.5;
    public static final double kELEVATOR_FREEFALL_DOWN_SPEED = -0.3;
    public static final double kELEVATOR_BRAKE_DOWN_SPEED = -0.01;
    public static final double kELEVATOR_TURBO_DOWN_SPEED = -0.5;
    
    // Other elevator constants
    public static final double kELEVATOR_CONTROLLED_DESCENT_DUTY_CYCLE = 3;
    public static final double kELEVATOR_SHORT_INCREMENT_DISTANCE = 2;
    public static final double kELEVATOR_YOGI_SECOND_TOTE_POSITION = 9;
    public static final double kELEVATOR_YOGI_LIFT_POSITION = 34;
    public static final double[] kELEVATOR_POSITIONS = {0, 1.5, 13, 24.5, 36};
    public static final double kELEVATOR_PID_TOLERANCE = 0.5;
    
    // Drive constants
    public static final double kPPR = 415;
    public static final double kDRIVE_FACTOR = 0.45;
    public static final double kDRIVE_SLOW_FACTOR = 0.35;
    public static final double kDRIVE_POV_FACTOR = 0.8;
	public static final double kDRIVE_ACCELERATION_RAMPING = 0.05;
	public static final double kDRIVE_DECCELERATION_RAMPING = 0.05;
	public static final double kDRIVE_TRIGGER_MULTIPLIER = 1.5;
	public static final double kDRIVE_ROBOT_ORIENTED_MULTIPLIER = 0.5;
	public static final double kDRIVE_ROBOT_ORIENTED_POV_MULTIPLIER = 0.65;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorElevatorEncoder = new Encoder(13, 18, true, EncodingType.k4X);
        LiveWindow.addSensor("Elevator", "ElevatorEncoder", elevatorElevatorEncoder);
        elevatorElevatorEncoder.setDistancePerPulse(0.0118);
        elevatorElevatorEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        elevatorElevatorMotor = new Victor(8);
        LiveWindow.addActuator("Elevator", "ElevatorMotor", (Victor) elevatorElevatorMotor);
        
        elevatorRatchet = new DoubleSolenoid(0, 2, 3);      
        LiveWindow.addActuator("Elevator", "Ratchet", elevatorRatchet);
        
        elevatorLimitUp = new DigitalInput(12);
        LiveWindow.addSensor("Elevator", "LimitUp", elevatorLimitUp);
        
        elevatorLimitDown = new DigitalInput(8);
        LiveWindow.addSensor("Elevator", "LimitDown", elevatorLimitDown);
        
        elevatorLimitRatchet = new DigitalInput(10);
        LiveWindow.addSensor("Elevator", "LimitRatchet", elevatorLimitRatchet);
        
        gripperGripper = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Gripper", "Gripper", gripperGripper);
        
        gripperTransducer = new AnalogInput(0);
        LiveWindow.addSensor("Gripper", "Transducer", gripperTransducer);
        
        gripperCompressor = new Compressor(0);
        
        
        drivetrainFRDMotor = new Talon(6);
        LiveWindow.addActuator("Drivetrain", "FRDMotor", (Talon) drivetrainFRDMotor);
        
        drivetrainFRAMotor = new Victor(7);
        LiveWindow.addActuator("Drivetrain", "FRAMotor", (Victor) drivetrainFRAMotor);
        
        drivetrainFLDMotor = new Talon(2);
        LiveWindow.addActuator("Drivetrain", "FLDMotor", (Talon) drivetrainFLDMotor);
        
        drivetrainFLAMotor = new Victor(3);
        LiveWindow.addActuator("Drivetrain", "FLAMotor", (Victor) drivetrainFLAMotor);
        
        drivetrainRRDMotor = new Talon(4);
        LiveWindow.addActuator("Drivetrain", "RRDMotor", (Talon) drivetrainRRDMotor);
        
        drivetrainRRAMotor = new Victor(5);
        LiveWindow.addActuator("Drivetrain", "RRAMotor", (Victor) drivetrainRRAMotor);
        
        drivetrainRLDMotor = new Talon(0);
        LiveWindow.addActuator("Drivetrain", "RLDMotor", (Talon) drivetrainRLDMotor);
        
        drivetrainRLAMotor = new Victor(1);
        LiveWindow.addActuator("Drivetrain", "RLAMotor", (Victor) drivetrainRLAMotor);
        
        drivetrainFLEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "FLEncoder", drivetrainFLEncoder);
        drivetrainFLEncoder.setDistancePerPulse(1.0);
        drivetrainFLEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainFREncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "FREncoder", drivetrainFREncoder);
        drivetrainFREncoder.setDistancePerPulse(1.0);
        drivetrainFREncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainRREncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RREncoder", drivetrainRREncoder);
        drivetrainRREncoder.setDistancePerPulse(1.0);
        drivetrainRREncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainRLEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "RLEncoder", drivetrainRLEncoder);
        drivetrainRLEncoder.setDistancePerPulse(1.0);
        drivetrainRLEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        drivetrainResetButton = new DigitalInput(9);
        LiveWindow.addSensor("Drivetrain", "ResetButton", drivetrainResetButton);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ds = DriverStation.getInstance();
    }
}
